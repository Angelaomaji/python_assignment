-- Question 1
class Book:
    def __init__(self, title, pages, chapters):
        self.title = title
        self.pages = pages
        self.chapters = chapters
    
    def info(self):
        return f"'{self.title}' has {self.pages} pages and {self.chapters} chapters."


# Derived class - Story
class Story(Book):
    def __init__(self, title, pages, chapters, moral):
        super().__init__(title, pages, chapters)
        self.moral = moral

    # Polymorphism: Story reads differently
    def read(self):
        return f"You are reading a short story titled '{self.title}'. Moral: {self.moral}"


# Derived class - Novel
class Novel(Book):
    def __init__(self, title, pages, chapters, genre):
        super().__init__(title, pages, chapters)
        self.genre = genre

    # Polymorphism: Novel reads differently
    def read(self):
        return f"You are diving into the {self.genre} novel '{self.title}'. Enjoy the long journey!"


# Create objects
story_book = Story("Sugar girl", 20, 2, "Honesty is the best policy")
novel_book = Novel("Adventure", 300, 20, "Fantasy")

# Test methods
print(story_book.info())
print(story_book.read())
print(novel_book.info())
print(novel_book.read())


-- Question 2
class Vehicle:
    def move(self):
        return "Moving in some way"

# Subclasses with polymorphism
class Car(Vehicle):
    def move(self):
        return "Driving "

class Aeroplane(Vehicle):
    def move(self):
        return "Flying "

class Bicycle(Vehicle):
    def move(self):
        return "Riding "
    

# Create objects
car = Car()
plane = Aeroplane()
bike = Bicycle()

# Test polymorphism
print(car.move())
print(plane.move())
print(bike.move())

